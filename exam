import java.util.ArrayList;
import java.util.List;

// Singleton: NotificationService
class NotificationService {
    private static NotificationService instance;
    private final List<User> subscribers = new ArrayList<>();

    private NotificationService() {}

    public static NotificationService getInstance() {
        if (instance == null) {
            instance = new NotificationService();
        }
        return instance;
    }

    public void subscribe(User user) {
        subscribers.add(user);
        System.out.println(user.getName() + " has subscribed to notifications.");
    }

    public void unsubscribe(User user) {
        subscribers.remove(user);
        System.out.println(user.getName() + " has unsubscribed from notifications.");
    }

    public void notifySubscribers(Message message) {
        for (User user : subscribers) {
            user.receiveNotification(message);
        }
    }
}

// Base Message class with Decorator functionality
abstract class Message {
    protected String content;
    private MessageState state;

    public Message(String content) {
        this.content = content;
        this.state = new NewState();
    }

    public String getContent() {
        return content;
    }

    public void setState(MessageState state) {
        this.state = state;
        state.handleState(this);
    }

    public MessageState getState() {
        return state;
    }
}

// Concrete Message Decorators
class BasicMessage extends Message {
    public BasicMessage(String content) {
        super(content);
    }
}

class EncryptedMessage extends Message {
    public EncryptedMessage(Message message) {
        super("[Encrypted] " + message.getContent());
    }
}

class AdvertisingMessage extends Message {
    public AdvertisingMessage(Message message) {
        super(message.getContent() + "\n--- Buy our products! ---");
    }
}

// Observer: User
class User {
    private final String name;

    public User(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void receiveNotification(Message message) {
        System.out.println(name + " received message: " + message.getContent());
    }
}

// State: MessageState and its implementations
interface MessageState {
    void handleState(Message message);
}

class NewState implements MessageState {
    @Override
    public void handleState(Message message) {
        System.out.println("Message is in 'New' state.");
    }
}

class SentState implements MessageState {
    @Override
    public void handleState(Message message) {
        System.out.println("Message has been sent.");
    }
}

class DeliveredState implements MessageState {
    @Override
    public void handleState(Message message) {
        System.out.println("Message has been delivered.");
    }
}

class ErrorState implements MessageState {
    @Override
    public void handleState(Message message) {
        System.out.println("Message encountered an error.");
    }
}

// Main Application
public class NotificationSystem {
    public static void main(String[] args) {
        // Create singleton NotificationService
        NotificationService notificationService = NotificationService.getInstance();

        // Create users and subscribe them
        User user1 = new User("Alice");
        User user2 = new User("Bob");
        notificationService.subscribe(user1);
        notificationService.subscribe(user2);

        // Create and decorate a message
        Message message = new BasicMessage("Discounts on new products!");
        message = new EncryptedMessage(message);
        message = new AdvertisingMessage(message);

        // Notify subscribers
        notificationService.notifySubscribers(message);

        // Change message state
        message.setState(new SentState());
        message.setState(new DeliveredState());
    }
}
